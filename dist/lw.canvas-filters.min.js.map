{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///lw.canvas-filters.min.js","webpack:///webpack/bootstrap fb4b6e849842ed76885c","webpack:///./canvas-filters.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","color","invertColor","data","i","value","brightness","undefined","contrast","gamma","Math","exp","log","grayscale","algorithm","shades","grayscaleAlgorithms","indexOf","Error","gray","r","g","b","max","min","parseInt","canvasFilters","canvas","settings","Object","assign","smoothing","shadesOfGray","context","getContext","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","imageData","getImageData","width","height","contrastFactor","brightnessOffset","gammaCorrection","shadesOfGrayFactor","il","length","putImageData","defineProperty","default"],"mappings":"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","file":"lw.canvas-filters.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CanvasFilter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasFilter\"] = factory();\n\telse\n\t\troot[\"CanvasFilter\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CanvasFilter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasFilter\"] = factory();\n\telse\n\t\troot[\"CanvasFilter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t// Grayscale algorithms\n\tvar grayscaleAlgorithms = ['none', 'average', 'desaturation', 'decomposition-min', 'decomposition-max', 'luma', 'luma-601', 'luma-709', 'luma-240', 'red-chanel', 'green-chanel', 'blue-chanel'];\n\t\n\t// Trucate color value in the 0-255 range\n\tfunction color(color) {\n\t    return color < 0 ? 0 : color > 255 ? 255 : color;\n\t}\n\t\n\t// Filters ...\n\tfunction invertColor(data, i, value) {\n\t    if (value) {\n\t        data[i] = color(255 - data[i]);\n\t        data[i + 1] = color(255 - data[i + 1]);\n\t        data[i + 2] = color(255 - data[i + 2]);\n\t    }\n\t}\n\t\n\tfunction brightness(data, i, value) {\n\t    if (value !== undefined) {\n\t        data[i] = color(data[i] + value);\n\t        data[i + 1] = color(data[i + 1] + value);\n\t        data[i + 2] = color(data[i + 2] + value);\n\t    }\n\t}\n\t\n\tfunction contrast(data, i, value) {\n\t    if (value !== undefined) {\n\t        data[i] = color(value * (data[i] - 128) + 128);\n\t        data[i + 1] = color(value * (data[i + 1] - 128) + 128);\n\t        data[i + 2] = color(value * (data[i + 2] - 128) + 128);\n\t    }\n\t}\n\t\n\tfunction gamma(data, i, value) {\n\t    if (value !== undefined) {\n\t        data[i] = color(Math.exp(Math.log(255 * (data[i] / 255)) * value));\n\t        data[i + 1] = color(Math.exp(Math.log(255 * (data[i + 1] / 255)) * value));\n\t        data[i + 2] = color(Math.exp(Math.log(255 * (data[i + 2] / 255)) * value));\n\t    }\n\t}\n\t\n\tfunction grayscale(data, i, algorithm, shades) {\n\t    // Graysale\n\t    // http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/\n\t\n\t    // Unsupported algorithm\n\t    if (grayscaleAlgorithms.indexOf(algorithm) === -1) {\n\t        throw new Error('Unsupported grayscale algorithm: ' + algorithm);\n\t    }\n\t\n\t    // None\n\t    if (algorithm === 'none') {\n\t        return null;\n\t    }\n\t\n\t    // Get Red/Green/Blue values\n\t    var gray = void 0;\n\t    var r = data[i];\n\t    var g = data[i + 1];\n\t    var b = data[i + 2];\n\t\n\t    switch (algorithm) {\n\t        case 'average':\n\t            gray = (r + g + b) / 3;\n\t            break;\n\t\n\t        case 'luma':\n\t            // Default\n\t            gray = r * 0.3 + g * 0.59 + b * 0.11;\n\t            break;\n\t\n\t        case 'luma-601':\n\t            // CCIR-601\n\t            gray = r * 0.299 + g * 0.587 + b * 0.114;\n\t            break;\n\t\n\t        case 'luma-709':\n\t            // ITU-R-709\n\t            gray = r * 0.2126 + g * 0.7152 + b * 0.0722;\n\t            break;\n\t\n\t        case 'luma-240':\n\t            // SMPTE-240M\n\t            gray = r * 0.212 + g * 0.701 + b * 0.087;\n\t            break;\n\t\n\t        case 'desaturation':\n\t            gray = (Math.max(r, g, b) + Math.min(r, g, b)) / 2;\n\t            break;\n\t\n\t        case 'decomposition-min':\n\t            gray = Math.min(r, g, b);\n\t            break;\n\t\n\t        case 'decomposition-max':\n\t            gray = Math.max(r, g, b);\n\t            break;\n\t\n\t        case 'red-chanel':\n\t            gray = r;\n\t            break;\n\t\n\t        case 'green-chanel':\n\t            gray = g;\n\t            break;\n\t\n\t        case 'blue-chanel':\n\t            gray = b;\n\t            break;\n\t    }\n\t\n\t    // Shades of gray\n\t    if (shades !== undefined) {\n\t        gray = parseInt(gray / shades) * shades;\n\t    }\n\t\n\t    // Force integer\n\t    gray = parseInt(gray);\n\t\n\t    // Set new r/g/b values\n\t    data[i] = color(gray);\n\t    data[i + 1] = color(gray);\n\t    data[i + 2] = color(gray);\n\t}\n\t\n\t// Apply filters on provided canvas\n\tfunction canvasFilters(canvas, settings) {\n\t    settings = Object.assign({}, {\n\t        smoothing: false, // Smoothing [true|fale]\n\t        brightness: 0, // Image brightness [-255 to +255]\n\t        contrast: 0, // Image contrast [-255 to +255]\n\t        gamma: 0, // Image gamma correction [0.01 to 7.99]\n\t        grayscale: 'none', // Graysale algorithm [average, luma, luma-601, luma-709, luma-240, desaturation, decomposition-[min|max], [red|green|blue]-chanel]\n\t        shadesOfGray: 256, // Number of shades of gray [2-256]\n\t        invertColor: false // Invert color...\n\t    }, settings || {});\n\t\n\t    // Get canvas 2d context\n\t    var context = canvas.getContext('2d');\n\t\n\t    // Smoothing\n\t    if (context.imageSmoothingEnabled !== undefined) {\n\t        context.imageSmoothingEnabled = settings.smoothing;\n\t    } else {\n\t        context.mozImageSmoothingEnabled = settings.smoothing;\n\t        context.webkitImageSmoothingEnabled = settings.smoothing;\n\t        context.msImageSmoothingEnabled = settings.smoothing;\n\t        context.oImageSmoothingEnabled = settings.smoothing;\n\t    }\n\t\n\t    // Get image data\n\t    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\t    var data = imageData.data;\n\t\n\t    var contrastFactor = void 0,\n\t        brightnessOffset = void 0,\n\t        gammaCorrection = void 0,\n\t        shadesOfGrayFactor = void 0;\n\t\n\t    if (settings.contrast !== 0) {\n\t        contrastFactor = 259 * (settings.contrast + 255) / (255 * (259 - settings.contrast));\n\t    }\n\t\n\t    if (settings.brightness !== 0) {\n\t        brightnessOffset = settings.brightness;\n\t    }\n\t\n\t    if (settings.gamma !== 0) {\n\t        gammaCorrection = 1 / settings.gamma;\n\t    }\n\t\n\t    // Shades of gray\n\t    if (settings.shadesOfGray > 1 && settings.shadesOfGray < 256) {\n\t        shadesOfGrayFactor = 255 / (settings.shadesOfGray - 1);\n\t    }\n\t\n\t    // For each pixel\n\t    for (var i = 0, il = data.length; i < il; i += 4) {\n\t        // Apply filters\n\t        invertColor(data, i, settings.invertColor);\n\t        brightness(data, i, brightnessOffset);\n\t        contrast(data, i, contrastFactor);\n\t        gamma(data, i, gammaCorrection);\n\t        grayscale(data, i, settings.grayscale, shadesOfGrayFactor);\n\t    }\n\t\n\t    // Write new image data on the context\n\t    context.putImageData(imageData, 0, 0);\n\t}\n\t\n\t// Exports\n\texports.canvasFilters = canvasFilters;\n\texports.default = canvasFilters;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// lw.canvas-filters.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fb4b6e849842ed76885c","// Grayscale algorithms\nconst grayscaleAlgorithms = [\n    'none',\n    'average',\n    'desaturation',\n    'decomposition-min', 'decomposition-max',\n    'luma', 'luma-601', 'luma-709', 'luma-240',\n    'red-chanel', 'green-chanel', 'blue-chanel'\n]\n\n// Trucate color value in the 0-255 range\nfunction color(color) {\n    return color < 0 ? 0 : (color > 255 ? 255 : color);\n}\n\n// Filters ...\nfunction invertColor(data, i, value) {\n    if (value) {\n        data[i]     = color(255 - data[i])\n        data[i + 1] = color(255 - data[i + 1])\n        data[i + 2] = color(255 - data[i + 2])\n    }\n}\n\nfunction brightness(data, i, value) {\n    if (value !== undefined) {\n        data[i]     = color(data[i]     + value)\n        data[i + 1] = color(data[i + 1] + value)\n        data[i + 2] = color(data[i + 2] + value)\n    }\n}\n\nfunction contrast(data, i, value) {\n    if (value !== undefined) {\n        data[i]     = color(value * (data[i]     - 128) + 128)\n        data[i + 1] = color(value * (data[i + 1] - 128) + 128)\n        data[i + 2] = color(value * (data[i + 2] - 128) + 128)\n    }\n}\n\nfunction gamma(data, i, value) {\n    if (value !== undefined) {\n        data[i]     = color(Math.exp(Math.log(255 * (data[i]     / 255)) * value))\n        data[i + 1] = color(Math.exp(Math.log(255 * (data[i + 1] / 255)) * value))\n        data[i + 2] = color(Math.exp(Math.log(255 * (data[i + 2] / 255)) * value))\n    }\n}\n\nfunction grayscale(data, i, algorithm, shades) {\n    // Graysale\n    // http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/\n\n    // Unsupported algorithm\n    if (grayscaleAlgorithms.indexOf(algorithm) === -1) {\n        throw new Error('Unsupported grayscale algorithm: ' + algorithm)\n    }\n\n    // None\n    if (algorithm === 'none') {\n        return null\n    }\n\n    // Get Red/Green/Blue values\n    let gray\n    let r = data[i];\n    let g = data[i + 1];\n    let b = data[i + 2];\n\n    switch (algorithm) {\n        case 'average':\n            gray = (r + g + b) / 3\n            break\n\n        case 'luma': // Default\n            gray = (r * 0.3) + (g * 0.59) + (b * 0.11)\n            break\n\n        case 'luma-601': // CCIR-601\n            gray = (r * 0.299) + (g * 0.587) + (b * 0.114)\n            break\n\n        case 'luma-709': // ITU-R-709\n            gray = (r * 0.2126) + (g * 0.7152) + (b * 0.0722)\n            break\n\n        case 'luma-240': // SMPTE-240M\n            gray = (r * 0.212) + (g * 0.701) + (b * 0.087)\n            break\n\n        case 'desaturation':\n            gray = (Math.max(r, g, b) + Math.min(r, g, b)) / 2\n            break\n\n        case 'decomposition-min':\n            gray = Math.min(r, g, b)\n            break\n\n        case 'decomposition-max':\n            gray = Math.max(r, g, b)\n            break\n\n        case 'red-chanel':\n            gray = r\n            break\n\n        case 'green-chanel':\n            gray = g\n            break\n\n        case 'blue-chanel':\n            gray = b\n            break\n    }\n\n    // Shades of gray\n    if (shades !== undefined) {\n        gray = parseInt(gray / shades) * shades\n    }\n\n    // Force integer\n    gray = parseInt(gray)\n\n    // Set new r/g/b values\n    data[i]     = color(gray)\n    data[i + 1] = color(gray)\n    data[i + 2] = color(gray)\n}\n\n// Apply filters on provided canvas\nfunction canvasFilters(canvas, settings) {\n    settings = Object.assign({}, {\n        smoothing   : false,  // Smoothing [true|fale]\n        brightness  : 0,      // Image brightness [-255 to +255]\n        contrast    : 0,      // Image contrast [-255 to +255]\n        gamma       : 0,      // Image gamma correction [0.01 to 7.99]\n        grayscale   : 'none', // Graysale algorithm [average, luma, luma-601, luma-709, luma-240, desaturation, decomposition-[min|max], [red|green|blue]-chanel]\n        shadesOfGray: 256,    // Number of shades of gray [2-256]\n        invertColor : false   // Invert color...\n    }, settings || {})\n\n    // Get canvas 2d context\n    let context = canvas.getContext('2d')\n\n    // Smoothing\n    if (context.imageSmoothingEnabled !== undefined) {\n        context.imageSmoothingEnabled = settings.smoothing\n    }\n    else {\n        context.mozImageSmoothingEnabled    = settings.smoothing\n        context.webkitImageSmoothingEnabled = settings.smoothing\n        context.msImageSmoothingEnabled     = settings.smoothing\n        context.oImageSmoothingEnabled      = settings.smoothing\n    }\n\n    // Get image data\n    let imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n    let data      = imageData.data\n\n    let contrastFactor, brightnessOffset, gammaCorrection, shadesOfGrayFactor\n\n    if (settings.contrast !== 0) {\n        contrastFactor = (259 * (settings.contrast + 255)) / (255 * (259 - settings.contrast))\n    }\n\n    if (settings.brightness !== 0) {\n        brightnessOffset = settings.brightness\n    }\n\n    if (settings.gamma !== 0) {\n        gammaCorrection = 1 / settings.gamma\n    }\n\n    // Shades of gray\n    if (settings.shadesOfGray > 1 && settings.shadesOfGray < 256) {\n        shadesOfGrayFactor = 255 / (settings.shadesOfGray - 1)\n    }\n\n    // For each pixel\n    for (let i = 0, il = data.length; i < il; i += 4) {\n        // Apply filters\n        invertColor(data, i, settings.invertColor)\n        brightness(data, i, brightnessOffset)\n        contrast(data, i, contrastFactor)\n        gamma(data, i, gammaCorrection)\n        grayscale(data, i, settings.grayscale, shadesOfGrayFactor)\n    }\n\n    // Write new image data on the context\n    context.putImageData(imageData, 0, 0)\n}\n\n// Exports\nexport { canvasFilters }\nexport default canvasFilters\n\n\n\n// WEBPACK FOOTER //\n// ./canvas-filters.js"],"sourceRoot":""}